% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy.R
\name{tidy_array}
\alias{tidy_array}
\alias{tidy_mat}
\title{Tidy a (named) matrix/array into long format}
\usage{
tidy_array(x, value_name = "x", require_dimnames = TRUE)

tidy_mat(x, value_name = "x", require_dimnames = TRUE)
}
\arguments{
\item{x}{A matrix or array. Works with 2D or higher dimensions.}

\item{value_name}{Character scalar: name of the value column. Default \code{"x"}.}

\item{require_dimnames}{Logical; if \code{TRUE} (default), error if any dimension
of \code{x} lacks names. If \code{FALSE}, fallback names like \code{Var1}, \code{Var2}, â€¦ are used.}
}
\value{
A data frame with \code{length(x)} rows, one column per dimension, and a value
column named \code{value_name}.
}
\description{
Converts a matrix or array \code{x} into a tidy data frame with one row per cell,
one column per dimension (using the dimension names if available), and a
value column.
}
\details{
Internally uses \code{\link[base:table]{base::as.data.frame.table()}} to reshape \code{x}. After reshaping,
all \strong{dimension columns} are passed through \code{\link[utils:type.convert]{utils::type.convert()}} with
\code{as.is = TRUE}, so numeric-like labels (e.g., \code{"1"}, \code{"2.5"}) become numeric.
}
\examples{
m <- matrix(1:6, nrow = 2, dimnames = list(age = c("2","3"), year = c("2001","2002","2003")))
tidy_array(m)

a <- array(1:8,
           dim = c(2,2,2),
           dimnames = list(age = c("2","3"), year = c("2001","2002"), area = c("N","S")))
tidy_array(a, value_name = "val")

# Permissive mode if dimnames are missing:
dimnames(m) <- NULL
tidy_array(m, require_dimnames = FALSE)

}
