% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dat.R
\name{cut_int}
\alias{cut_int}
\alias{cut_ages}
\alias{cut_years}
\title{Cut integer sequences into labeled blocks (ages or years)}
\usage{
cut_int(x, breaks, ordered = FALSE)

cut_ages(ages, breaks)

cut_years(years, breaks)
}
\arguments{
\item{x, ages, years}{Integer vector to be grouped.}

\item{breaks}{Integer vector of group starts (strictly increasing).
Must start at \code{min(x)} and end at \code{max(x)}.}

\item{ordered}{Logical; should the returned factor be ordered?
Default is \code{FALSE}.}
}
\value{
A factor with the same length as \code{x}, whose levels enumerate
the blocks in increasing order.
}
\description{
\code{cut_int()} turns an integer vector into labeled
blocks using an increasing vector of break points.

Labels are of the form \code{"start-end"} for multi-year/age blocks and
\code{"k"} for single blocks. The last label always ends at \code{max(x)}
(e.g. \code{"2003-2025"} or \code{"14"}).

Convenience wrappers \code{\link[=cut_ages]{cut_ages()}} and \code{\link[=cut_years]{cut_years()}} call \code{cut_int()}
with argument names that read naturally for common assessment inputs.
}
\details{
Let \verb{breaks = (b1, b2, ..., bm)}. Blocks are
\verb{[b1, b2-1], [b2, b3-1], ..., [b_\{m-1\}, b_m]} on the integer line.
If \verb{b_\{m-1\} = b_m}, the last block is the singleton \code{{b_m}}.

\strong{Input requirements (enforced):}
\itemize{
\item \code{x}, \code{ages}, \code{years} are numeric, integer-valued, and non-\code{NA}.
\item \code{breaks} is numeric, increasing, and non-\code{NA}.
\item \code{min(x) == breaks[1]} and \code{max(x) == tail(breaks, 1)}.
}
}
\examples{
# Ages: single-year blocks
cut_ages(2:14, 2:14)

# Ages: a wide block then singletons
cut_ages(2:14, c(2, 10, 11:14))

# Ages: even-width blocks, last block closes at max age
cut_ages(2:14, seq(2, 14, by = 2))

# Years: management-era blocks
cut_years(1983:2025, c(1983, 1992, 1997, 2003, 2025))

# Direct use with ordered = TRUE (if useful for contrasts)
cut_int(2:10, c(2, 5, 8, 10), ordered = TRUE)

}
\seealso{
\code{\link[base:findInterval]{base::findInterval()}}, \code{\link[stats:model.matrix]{stats::model.matrix()}}
}
