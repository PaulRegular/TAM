% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nll.R
\name{solve_F_mult}
\alias{solve_F_mult}
\title{Solve F multiplier k from a target catch (numbers)}
\usage{
solve_F_mult(C_target, F, M, N, k_init = 1, n_iter = 6)
}
\arguments{
\item{C_target}{Numeric scalar; desired total catch (numbers).}

\item{F}{Numeric vector; terminal fishing mortality-at-age \eqn{F^{\mathrm{term}}_a}.}

\item{M}{Numeric vector; natural mortality-at-age \eqn{M_a}.}

\item{N}{Numeric vector; abundance-at-age \eqn{N_a}.}

\item{k_init}{Positive scalar; initial multiplier (default \code{1}).}

\item{n_iter}{Integer; Newton steps (default \code{6}).}
}
\value{
Numeric scalar \eqn{k}.
}
\description{
Finds the scalar multiplier \eqn{k>0} such that the scaled fishing
mortalities \eqn{F_a(k)=k\,F^{\mathrm{term}}_a} achieve a target total
catch \eqn{C_\star} under Baranov's equation:
\deqn{C(k) = \sum_a N_a \frac{F_a(k)}{Z_a(k)} \left[1 - \exp\{-Z_a(k)\}\right],\quad
      Z_a(k)=F_a(k)+M_a.}

The target is softly capped at \eqn{C_\star=\min(C_{\mathrm{target}}, \sum_a N_a)}
to avoid impossible requests (you cannot remove more individuals than exist).
Newton updates are done in log-space for \eqn{\theta=\log k}, which is both
AD-friendly and numerically stable.
}
\details{
The Newton step is taken on \eqn{\theta=\log k} by solving
\eqn{g(\theta)=\log C(k)-\log C_\star=0}. The derivative used is
\deqn{\frac{dg}{d\theta} = \frac{k}{C(k)} \frac{dC}{dk},}
with
\deqn{\frac{dC}{dk} = \sum_a N_a \left[
  \frac{F^{\mathrm{term}}_a M_a}{Z_a(k)^2}\left(1-e^{-Z_a(k)}\right)
  + \frac{k F^{\mathrm{term}}_a}{Z_a(k)}\, e^{-Z_a(k)} F^{\mathrm{term}}_a
\right].}
Small epsilons are used only to protect divisions; no hard branching is used,
so it plays nicely with AD (e.g., RTMB).
}
\examples{
Fterm <- rep(0.3, 6)
M <- rep(0.2, 6)
N <- 1000 * exp(-0.25 * (0:5))
C_lin  <- sum(N * (1 - exp(-M)) / M * Fterm)  # small-F linear approx
k_hat  <- solve_F_multiplier(C_target = C_lin, F = Fterm, M = M, N = N)
k_hat

}
